{"version":3,"sources":["logo.svg","test/Text.js","pages/item-page/ItemPage.js","pages/homepage/Homepage.js","App.js","reportWebVitals.js","index.js"],"names":["extend","TextGeometry","Text","children","vAlign","hAlign","size","props","color","font","useLoader","FontLoader","config","useMemo","height","curveSegments","bevelEnabled","flatShading","mesh","useRef","useLayoutEffect","THREE","current","geometry","computeBoundingBox","boundingBox","getSize","position","x","y","scale","ref","castShadow","receiveShadow","attach","args","roughness","needsUpdate","GroundPlane","bgcolor","alphaMap","TextureLoader","Math","PI","transparent","opacity","UnusualCube","useGLTF","scene","nodes","animations","materials","useAnimations","mixer","names","actions","clips","useEffect","console","log","object","ItemPage","useState","state","setState","texx","setTexx","setBgcolor","className","style","background","linear","dpr","camera","fov","onCreated","gl","colorManagement","shadowMap","shadows","intensity","OrbitControls","minDistance","maxDistance","enablePan","fallback","Environment","files","path","onClick","floor","random","toString","value","onChange","e","target","Homepage","to","App","basename","process","render","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27ea0a88.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import * as THREE from \"three\";\r\nimport React, { useMemo, useRef, useLayoutEffect } from \"react\";\r\nimport { extend, useLoader } from \"@react-three/fiber\";\r\nimport { FontLoader } from \"three/examples/jsm/loaders/FontLoader\";\r\nimport { TextGeometry } from \"three/examples/jsm/geometries/TextGeometry\";\r\nimport BASEPATH from \"../basepath\";\r\n\r\nextend({ TextGeometry });\r\n\r\nfunction Text({\r\n  children,\r\n  vAlign = \"center\",\r\n  hAlign = \"center\",\r\n  size = 1.5,\r\n  color = \"#000000\",\r\n  ...props\r\n}) {\r\n  const font = useLoader(FontLoader, BASEPATH + \"/CocoSharp.json\");\r\n  const config = useMemo(\r\n    () => ({\r\n      font,\r\n      size: 40,\r\n      height: 30,\r\n      curveSegments: 12,\r\n      bevelEnabled: false,\r\n      flatShading: false,\r\n    }),\r\n    [font]\r\n  );\r\n  const mesh = useRef();\r\n\r\n  useLayoutEffect(() => {\r\n    const size = new THREE.Vector3();\r\n    mesh.current.geometry.computeBoundingBox();\r\n    mesh.current.geometry.boundingBox.getSize(size);\r\n    mesh.current.position.x =\r\n      hAlign === \"center\" ? -size.x / 2 : hAlign === \"right\" ? 0 : -size.x;\r\n    mesh.current.position.y =\r\n      vAlign === \"center\" ? -size.y / 2 : vAlign === \"top\" ? 0 : -size.y;\r\n  }, [children]);\r\n\r\n  return (\r\n    <group {...props} scale={[size * 0.05, size * 0.05, size * 0.04]}>\r\n      <mesh ref={mesh} castShadow receiveShadow>\r\n        <textGeometry attach=\"geometry\" args={[children, config]} />\r\n        <meshPhysicalMaterial\r\n          attach=\"material\"\r\n          color=\"#ffffff\"\r\n          flatShading={false}\r\n          roughness={0.05}\r\n          needsUpdate={true}\r\n        />\r\n      </mesh>\r\n    </group>\r\n  );\r\n}\r\n\r\nexport default Text;\r\n","import \"./ItemPage.css\";\r\nimport * as THREE from \"three\";\r\n\r\nimport { BrowserRouter, Route, Switch, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport React, { Suspense, useRef, useState, useMemo, useEffect } from \"react\";\r\n\r\nimport Text from \"../../test/Text\";\r\n\r\nimport { useLoader, Canvas, useFrame } from \"@react-three/fiber\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n\r\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\r\n\r\nimport {\r\n  OrbitControls,\r\n  ContactShadows,\r\n  Environment,\r\n  Plane,\r\n  useGLTF,\r\n  useAnimations,\r\n} from \"@react-three/drei\";\r\nimport BASEPATH from \"../../basepath\";\r\n\r\nfunction Box(props) {\r\n  // This reference will give us direct access to the mesh\r\n  const mesh = useRef();\r\n  // Set up state for the hovered and active state\r\n  const [hovered, setHover] = useState(false);\r\n  const [active, setActive] = useState(false);\r\n  // Subscribe this component to the render-loop, rotate the mesh every frame\r\n  useFrame((state, delta) => (mesh.current.rotation.x += 0.01));\r\n  // Return view, these are regular three.js elements expressed in JSX\r\n  return (\r\n    <mesh\r\n      {...props}\r\n      ref={mesh}\r\n      scale={active ? 1.5 : 1}\r\n      onClick={(event) => setActive(!active)}\r\n      onPointerOver={(event) => setHover(true)}\r\n      onPointerOut={(event) => setHover(false)}\r\n    >\r\n      <boxGeometry args={[1, 1, 1]} />\r\n      <meshStandardMaterial color={hovered ? \"hotpink\" : \"orange\"} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction GroundPlane({ bgcolor }) {\r\n  //roundshadow.png\r\n  const alphaMap = useLoader(TextureLoader, BASEPATH + \"/alphamap.jpg\");\r\n\r\n  return (\r\n    <Plane\r\n      args={[100, 100]}\r\n      receiveShadow\r\n      rotation-x={-Math.PI / 2}\r\n      position={[0, -12, 0]}\r\n    >\r\n      <meshPhysicalMaterial\r\n        attach=\"material\"\r\n        color={bgcolor}\r\n        roughness={0.5}\r\n        transparent\r\n        opacity={0.3}\r\n        alphaMap={alphaMap}\r\n      />\r\n    </Plane>\r\n  );\r\n}\r\n\r\nfunction UnusualCube() {\r\n  const { scene, nodes, materials, animations } = useGLTF(\r\n    BASEPATH + \"/model_2.glb\"\r\n  );\r\n  const { ref, mixer, names, actions, clips } = useAnimations(\r\n    animations,\r\n    scene\r\n  );\r\n  useEffect(() => {\r\n    //actions?.jump.play();\r\n  });\r\n\r\n  for (let child of scene.children[0].children) {\r\n    child.castShadow = true;\r\n    //child.receiveShadow = true;\r\n  }\r\n\r\n  console.log(nodes);\r\n  console.log(typeof nodes);\r\n\r\n  return (\r\n    <group scale={[0.5, 0.5, 0.5]} position={[-5, -5, 5]}>\r\n      <primitive object={scene} />\r\n      {/*       \r\n      {Object.values(nodes)\r\n        .filter((node) => node.name.startsWith(\"main_mesh\"))\r\n        .map((node) => (\r\n          <primitive object={node} key={node.name} />\r\n        ))}\r\n      {/* <mesh>\r\n        <boxGeometry attach=\"geometry\" />\r\n        <meshPhysicalMaterial attach=\"material\" color=\"white\" />\r\n      </mesh> */}\r\n    </group>\r\n  );\r\n}\r\n\r\nfunction ItemPage() {\r\n  //const gltf = useLoader(GLTFLoader, \"data/model.glb\");\r\n\r\n  /*\r\n  const directionalLight1 = useMemo(\r\n    () => new THREE.DirectionalLight(0xffffff),\r\n    []\r\n  );*/\r\n\r\n  const [state, setState] = useState(false);\r\n  const [texx, setTexx] = useState(\"\");\r\n\r\n  const [bgcolor, setBgcolor] = useState(\"#0a1022\");\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <div className=\"canvas-holder\" style={{ background: bgcolor }}>\r\n        {/* <primitive object={gltf.scene} /> */}\r\n        <Canvas\r\n          linear\r\n          dpr={[1, 2]}\r\n          camera={{ fov: 65, position: [15, 12, 15] }}\r\n          onCreated={({ gl }) => {\r\n            //gl.toneMapping = THREE.Uncharted2ToneMapping;\r\n            //gl.setClearColor(new THREE.Color(bgcolor));\r\n          }}\r\n          colorManagement\r\n          shadowMap\r\n          shadows\r\n        >\r\n          <pointLight\r\n            //object={directionalLight1}\r\n            castShadow\r\n            position={[-10, 20, 10]}\r\n            intensity={1}\r\n            shadow-mapSize-width={1024}\r\n            shadow-mapSize-height={1024}\r\n          />\r\n          {/* <primitive object={directionalLight1.target} position={[0, 0, 0]}/> */}\r\n          {/* <pointLight position={[10, 10, 10]} intensity={0.1} color={\"#ff0000\"} /> */}\r\n          <OrbitControls minDistance={10} maxDistance={100} enablePan={false} />\r\n\r\n          <Suspense fallback={null}>\r\n            <Text>{texx}</Text>\r\n            <GroundPlane bgcolor={bgcolor} />\r\n          </Suspense>\r\n          <Suspense fallback={null}>\r\n            <Environment\r\n              background={false} // Whether to affect scene.background\r\n              files=\"abandoned_workshop_1k_small.hdr\" // Array of cubemap files OR single equirectangular file\r\n              path={BASEPATH + \"/\"} // Path to the above file(s)\r\n              //preset={null} // Preset string (overrides files and path)\r\n            />\r\n          </Suspense>\r\n          <Suspense fallback={null}>\r\n            <UnusualCube />\r\n          </Suspense>\r\n          {/* <ContactShadows /> */}\r\n          {/* <fog args={[\"white\", 10, 50]} /> */}\r\n        </Canvas>\r\n      </div>\r\n\r\n      <div className=\"ui\">\r\n        <button\r\n          onClick={() => {\r\n            setState(!state);\r\n            console.log(state);\r\n            setBgcolor(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\r\n          }}\r\n        >\r\n          Random Color\r\n        </button>\r\n        <input value={texx} onChange={(e) => setTexx(e.target.value)}></input>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ItemPage;\r\n","import \"./Homepage.css\";\r\nimport * as THREE from \"three\";\r\n\r\nimport { BrowserRouter, Route, Switch, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport React, { Suspense, useRef, useState } from \"react\";\r\n\r\nimport Text from \"../../test/Text\";\r\n\r\nimport { useLoader, Canvas, useFrame } from \"@react-three/fiber\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n\r\nimport {\r\n  OrbitControls,\r\n  ContactShadows,\r\n  Environment,\r\n  Plane,\r\n} from \"@react-three/drei\";\r\nimport ItemPage from \"../item-page/ItemPage\";\r\n\r\nfunction Box(props) {\r\n  // This reference will give us direct access to the mesh\r\n  const mesh = useRef();\r\n  // Set up state for the hovered and active state\r\n  const [hovered, setHover] = useState(false);\r\n  const [active, setActive] = useState(false);\r\n  // Subscribe this component to the render-loop, rotate the mesh every frame\r\n  useFrame((state, delta) => (mesh.current.rotation.x += 0.01));\r\n  // Return view, these are regular three.js elements expressed in JSX\r\n  return (\r\n    <mesh\r\n      {...props}\r\n      ref={mesh}\r\n      scale={active ? 1.5 : 1}\r\n      onClick={(event) => setActive(!active)}\r\n      onPointerOver={(event) => setHover(true)}\r\n      onPointerOut={(event) => setHover(false)}\r\n    >\r\n      <boxGeometry args={[1, 1, 1]} />\r\n      <meshStandardMaterial color={hovered ? \"hotpink\" : \"orange\"} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Homepage() {\r\n  //const gltf = useLoader(GLTFLoader, \"data/model.glb\");\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <h1 style={{ color: \"#ffffff\" }}> HomePage </h1>\r\n      <br />\r\n      <Link to=\"/item/1\">To Item Page</Link>\r\n      {/* <primitive object={gltf.scene} /> */}\r\n\r\n      {/*<div className=\"canvas-holder\"></div>\r\n       <Canvas\r\n        linear\r\n        dpr={[1, 2]}\r\n        camera={{ fov: 100, position: [0, 0, 30] }}\r\n        onCreated={({ gl }) => {\r\n          //gl.toneMapping = THREE.Uncharted2ToneMapping;\r\n          //gl.setClearColor(new THREE.Color(\"#0a1022\"));\r\n        }}\r\n        //shadowMap\r\n      >\r\n        <directionalLight\r\n          castShadow\r\n          position={[-10, 10, 10]}\r\n          intensity={1}\r\n          //shadow-mapSize-width={1024}\r\n          //shadow-mapSize-height={1024}\r\n        />\r\n        <pointLight position={[10, 10, 10]} intensity={0} color={\"#ff0000\"} />\r\n        <OrbitControls />\r\n\r\n        <Suspense fallback={null}>\r\n          <Text> Hello </Text>\r\n        </Suspense>\r\n\r\n        <Plane args={[1000, 1000]}>\r\n          <meshStandardMaterial attach=\"material\" color=\"#888\" />\r\n        </Plane>\r\n\r\n        <Suspense fallback={null}>\r\n          <Environment\r\n            background={true} // Whether to affect scene.background\r\n            files={[\"courtyard.jpg\"]} // Array of cubemap files OR single equirectangular file\r\n            path={\"/\"} // Path to the above file(s)\r\n            //preset={null} // Preset string (overrides files and path)\r\n          />\r\n        </Suspense>\r\n        <ContactShadows />\r\n      </Canvas>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n\r\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport Homepage from \"./pages/homepage/Homepage\";\r\nimport ItemPage from \"./pages/item-page/ItemPage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <Switch>\r\n        <Route path=\"/\" render={(props) => <Homepage {...props} />} exact />\r\n        <Route\r\n          path=\"/item/:id\"\r\n          render={(props) => <ItemPage {...props} />}\r\n          exact\r\n        />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}